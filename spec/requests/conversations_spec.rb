require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/conversations", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Conversation. As you add validations to Conversation, be sure to
  # adjust the attributes here as well.

  describe "GET /index" do
    before do 
      product = create(:product, title: "First Product")
      conversation = create(:conversation, product: product)
    end

    it "renders a successful response" do
      get conversations_url
      expect(response.status).to eq(302)

      visit conversations_url
      expect(page).to have_content("The first product")
    end
  end

  describe "GET /show" do
    xit "renders a successful response" do
      conversation = Conversation.create! valid_attributes
      get conversation_url(conversation)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    xit "renders a successful response" do
      get new_conversation_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    xit "renders a successful response" do
      conversation = Conversation.create! valid_attributes
      get edit_conversation_url(conversation)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      xit "creates a new Conversation" do
        expect {
          post conversations_url, params: { conversation: valid_attributes }
        }.to change(Conversation, :count).by(1)
      end

      xit "redirects to the created conversation" do
        post conversations_url, params: { conversation: valid_attributes }
        expect(response).to redirect_to(conversation_url(Conversation.last))
      end
    end

    context "with invalid parameters" do
      xit "does not create a new Conversation" do
        expect {
          post conversations_url, params: { conversation: invalid_attributes }
        }.to change(Conversation, :count).by(0)
      end

    
      xit "renders a response with 422 status (i.e. to display the 'new' template)" do
        post conversations_url, params: { conversation: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      xit "updates the requested conversation" do
        conversation = Conversation.create! valid_attributes
        patch conversation_url(conversation), params: { conversation: new_attributes }
        conversation.reload
        skip("Add assertions for updated state")
      end

      xit "redirects to the conversation" do
        conversation = Conversation.create! valid_attributes
        patch conversation_url(conversation), params: { conversation: new_attributes }
        conversation.reload
        expect(response).to redirect_to(conversation_url(conversation))
      end
    end

    context "with invalid parameters" do
    
      xit "renders a response with 422 status (i.e. to display the 'edit' template)" do
        conversation = Conversation.create! valid_attributes
        patch conversation_url(conversation), params: { conversation: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    xit "destroys the requested conversation" do
      conversation = Conversation.create! valid_attributes
      expect {
        delete conversation_url(conversation)
      }.to change(Conversation, :count).by(-1)
    end

    xit "redirects to the conversations list" do
      conversation = Conversation.create! valid_attributes
      delete conversation_url(conversation)
      expect(response).to redirect_to(conversations_url)
    end
  end
end
